class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> answer;
        backtrack(answer, "", 0, 0, n);
        return answer;
    }
    
    void backtrack(vector<string> &answer, string current, int open, int close, int max) {
        if(current.size() == max*2) {
            answer.push_back(current);
            return;
        }
        
        if(open < max) {
            backtrack(answer, current+"(", open+1, close, max);
        }
        if(close < open) {
            backtrack(answer, current+")", open, close+1, max);
        }
    }
};
